open Const
open Scanf
open Printf

let parse_config file =
  let chan = open_in file in
  let rmax = float_of_string (input_line chan) in
  let tree_type = int_of_string (input_line chan) in 
  let size_of_tree = int_of_string (input_line chan) in
  let number_of_speeds = int_of_string (input_line chan) in
  let max_speed = float_of_string (input_line chan) in
  let regularity_speed = int_of_string (input_line chan) in
  let number_of_tests = int_of_string (input_line chan) in
  let () = close_in chan in
  {
  rmax = rmax;
  tree_type = tree_type;
  size_of_tree = size_of_tree;
  number_of_speeds = number_of_speeds;
  max_speed = max_speed;
  regularity_speed = regularity_speed;
  number_of_tests = number_of_tests 
  }


let script config_file =
  let param = parse_config config_file in
  let nheur = param.size_of_tree in
  let tab = Array.make_matrix nheur 4 (0.,-1.) in
  let break = ref true in
  let workon = ref true in
  let size_of_tree = param.size_of_tree in
  let buff = ref (open_out ("result_"^(string_of_int size_of_tree)^".avg")) in 
  while !break do
  try
    while true do
      let e0 = (scanf " %f " (fun f -> f)) in
      let e1 = (scanf " %f " (fun f -> f)) in
      let e2 = (scanf " %f " (fun f -> f)) in
      let e3 = (scanf " %f " (fun f -> f)) in
      let e4 = (scanf " %f " (fun f -> f)) in
      let e5 = (scanf " %f " (fun f -> f)) in
      let temp = int_of_float e1 in
        tab.(temp).(0) <- (1.,e3/.e4) ;
        tab.(temp).(1) <- (1.,e3/.e5) ;
        tab.(temp).(2) <- (0.,e3/.e4) ;
        tab.(temp).(3) <- (0.,e3/.e5) ;
	if e2 < e3 then failwith "Erreur dans l'energie de l'heuristique" ; 
	if e4 < e3 then failwith "Erreur dans l'energie du LP" ; 
	let temp = int_of_float e1 in
        (let r2 = e2/.e3 in let (j,r) = tab.(temp).(0) in tab.(temp).(0)<-(j+.1.,r+.r2); let (_,r) = tab.(temp).(2) in if r2 > r then tab.(temp).(2) <- (0.,r2);
        let r3 = e2/.e4 in let (j,r) = tab.(temp).(1) in tab.(temp).(1)<-(j+.1.,r+.r3); let (_,r) = tab.(temp).(3) in if r3 > r then tab.(temp).(3) <- (0.,r2); )
    done
  with
    |Scan_failure _ -> ()
    |End_of_file -> 
      begin
        break := false ;
          for i = 0 to nheur-1 do
          fprintf !buff "%d\t" (i+1) ;
          for k=0 to 1 do
            let j,r = tab.(i).(k) in
              if j=0. then fprintf !buff "-1.\t"
              else fprintf !buff "%f\t" (r/.j) ;
              tab.(i).(k)<-(0.,-1.)
          done;
          for k=1 to 2 do
            let _,r = tab.(i).(k) in
              fprintf !buff "%f\t" r ;
              tab.(i).(k)<-(0.,-1.)
          done;
        fprintf !buff "\n"
        done

      end
     | _ -> ()
done


let () = script Sys.argv.(1)
