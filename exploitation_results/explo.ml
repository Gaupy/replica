open Const
open Scanf
open Printf

let parse_config file =
  let chan = open_in file in
  let rmax = float_of_string (input_line chan) in
  let tree_type = int_of_string (input_line chan) in 
  let size_of_tree = int_of_string (input_line chan) in
  let number_of_speeds = int_of_string (input_line chan) in
  let max_speed = float_of_string (input_line chan) in
  let regularity_speed = int_of_string (input_line chan) in
  let number_of_tests = int_of_string (input_line chan) in
  let () = close_in chan in
  {
  rmax = rmax;
  tree_type = tree_type;
  size_of_tree = size_of_tree;
  number_of_speeds = number_of_speeds;
  max_speed = max_speed;
  regularity_speed = regularity_speed;
  number_of_tests = number_of_tests 
  }


let script config_file =
  let param = parse_config config_file in
  let nheur = param.size_of_tree in
  let tab = Array.make_matrix nheur 6 (0.,0.) in
  let break = ref true in
  let workon = ref 0 in
  let size_of_tree = param.size_of_tree in
  let buff = ref (open_out ("result_"^(string_of_int size_of_tree)^".avg")) in 
  while !break do
  try
    while true do
      let vertex = (scanf " %f " (fun f -> f)) in
      let servers = (scanf " %f " (fun f -> f)) in
      let iteration = (scanf " %f " (fun f -> f)) in
      let precision_greedy = (scanf " %f " (fun f -> f)) in
      let precision_move1 = (scanf " %f " (fun f -> f)) in
      let precision_move2 = (scanf " %f " (fun f -> f)) in
      let res_greedy = (scanf " %f " (fun f -> f)) in
      let res_move1 = (scanf " %f " (fun f -> f)) in
      let res_move2 = (scanf " %f " (fun f -> f)) in
      let res_opt, res_greedy_opt, res_move1_opt, res_move2_opt = 
          if (vertex <= 25.) then 
            scanf " %f%f%f%f " (fun a b c d -> (a, b, c, d))
          else 
            (1.,1.,1.,1.)
          in 
(*      if (vertex <= 25) then*)
(*          let res_opt = (scanf " %f " (fun f -> f)) in*)
(*          let res_greedy_opt = (scanf " %f " (fun f -> f)) in*)
(*          let res_move1_opt = (scanf " %f " (fun f -> f)) in*)
(*          let res_move2_opt = (scanf " %f " (fun f -> f)) in ()*)
(*      else*)
(*        begin*)
(*          let res_opt = 1 in*)
(*          let res_greedy_opt = 1 in*)
(*          let res_move1_opt = 1 in*)
(*          let res_move2_opt = 1 in *)
(*        end;*)
      incr workon;
        let precision = 0.0001 in
        if (precision_greedy > precision || precision_greedy < -. precision ) then () else
        if (precision_move1 > precision || precision_move1 < -. precision ) then () else
        if (precision_move2 > precision || precision_move2 < -. precision ) then () else
        if res_opt < 0. || res_greedy_opt <0. || res_move1_opt <0. || res_move2_opt <0. then printf "Erreur dans une solution du LP\n" else
	if res_greedy < res_opt then printf "Erreur dans l'energie de l'heuristique greedy %f %d\n" (res_greedy/.res_opt) !workon else
	if res_move1 < res_opt then printf "Erreur dans l'energie de l'heuristique move1 %f %d\n" (res_move1/.res_opt) !workon else
	if res_move2 < res_opt then printf "Erreur dans l'energie de l'heuristique move2 %f %d\n" (res_move2/.res_opt) !workon else
	if res_greedy_opt < res_opt then printf "Erreur dans l'energie du LP greedy %f %d\n" (res_greedy_opt/.res_opt) !workon else 
	if res_move1_opt < res_opt then printf "Erreur dans l'energie du LP move1 %f %d\n" (res_move1_opt/.res_opt) !workon else 
	if res_move2_opt < res_opt then printf "Erreur dans l'energie du LP move2 %f %d\n" (res_move2_opt/.res_opt) !workon else 
	let temp = (int_of_float servers) -1  in
        (
        let r2 = res_greedy/.res_opt in
           let (j,r) = tab.(temp).(0) in 
             tab.(temp).(0)<-(j+.1.,r+.r2);
(*           let (_,r') = tab.(temp).(2) in *)
(*           if r2 > r' then tab.(temp).(2) <- (0.,r2);*)
         let r3 = res_greedy_opt/.res_opt in 
           let (j,r) = tab.(temp).(1) in 
             tab.(temp).(1)<-(j+.1.,r+.r3); 
(*           let (_,r) = tab.(temp).(3) in *)
(*           if r3 > r then tab.(temp).(3) <- (0.,r3))*) 
        let r4 = res_move1/.res_opt in
           let (j,r) = tab.(temp).(2) in 
             tab.(temp).(2)<-(j+.1.,r+.r4);
         let r5 = res_move1_opt/.res_opt in 
           let (j,r) = tab.(temp).(3) in 
             tab.(temp).(3)<-(j+.1.,r+.r5); 
        let r6 = res_move2/.res_opt in
           let (j,r) = tab.(temp).(4) in 
             tab.(temp).(4)<-(j+.1.,r+.r6);
         let r7 = res_move2_opt/.res_opt in 
           let (j,r) = tab.(temp).(5) in 
             tab.(temp).(5)<-(j+.1.,r+.r7); 
        )
    done
  with
    |Scan_failure _ -> ()
    |End_of_file -> 
      begin
        break := false ;
          for i = 0 to nheur-1 do
          fprintf !buff "%d\t" (i+1) ;
          for k=0 to 5 do
            let j,r = tab.(i).(k) in
              if j=0. then fprintf !buff "-1.\t"
              else fprintf !buff "%f\t" (r/.j) ;
              fprintf !buff "%d \t" (int_of_float j)
(*              tab.(i).(k)<-(0.,-1.)*)
          done;
(*          for k=2 to 3 do*)
(*            let _,r = tab.(i).(k) in*)
(*              fprintf !buff "%f\t" r ;*)
(*              tab.(i).(k)<-(0.,-1.)*)
(*          done;*)
          
        fprintf !buff "\n"
        done

      end
     | _ -> ()
done


let () = script Sys.argv.(1)
